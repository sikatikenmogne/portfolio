name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ===============================================
  # JOB 1: QUALITY GATES (all branches)
  # ===============================================
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
          
    - name: Install dependencies
      run: |
        if [ -f pnpm-lock.yaml ]; then
          pnpm install --frozen-lockfile
        else
          pnpm install --no-frozen-lockfile
        fi
      
    - name: Lint code
      run: pnpm run lint
      
    - name: Build application
      run: pnpm run build

  # ===============================================
  # JOB 2: CHECK COMMIT ELIGIBILITY (develop only)
  # ===============================================
  check-commits:
    name: Check Commit Eligibility
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      commit-details: ${{ steps.check.outputs.details }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit analysis
        
    - name: Check commit prefixes
      id: check
      run: |
        echo "=== Checking commit eligibility for preview deployment ==="
        
        # Get commits since last merge to main (or last 10 commits as fallback)
        BASE_COMMIT=$(git merge-base origin/main HEAD 2>/dev/null || git rev-parse HEAD~10)
        
        # Get commit messages since base
        COMMITS=$(git log --pretty=format:"%h: %s" $BASE_COMMIT..HEAD)
        echo "Commits to analyze:"
        echo "$COMMITS"
        
        # Check for deployment-worthy prefixes
        DEPLOY_PREFIXES="^(feat|fix|perf|revert)(\(.+\))?:"
        
        if echo "$COMMITS" | grep -qE "$DEPLOY_PREFIXES"; then
          echo "Found commits with deployment-worthy prefixes"
          echo "deploy=true" >> $GITHUB_OUTPUT
          
          # Extract and format eligible commits
          ELIGIBLE_COMMITS=$(echo "$COMMITS" | grep -E "$DEPLOY_PREFIXES" || echo "No eligible commits found")
          echo "details<<EOF" >> $GITHUB_OUTPUT
          echo "$ELIGIBLE_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No commits found with required prefixes (feat, fix, perf, revert)"
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "details=No deployment-worthy commits found" >> $GITHUB_OUTPUT
        fi
        
        echo "=== Eligible commit prefixes: feat, fix, perf, revert ==="

  # ===============================================
  # JOB 3: DEPLOY PREVIEW (develop only, conditional)
  # ===============================================
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, check-commits]
    if: github.ref == 'refs/heads/develop' && needs.check-commits.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Log deployment reason
      run: |
        echo "Deploying to preview because of eligible commits:"
        echo "${{ needs.check-commits.outputs.commit-details }}"
        
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      id: vercel-preview
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        
    - name: Preview Deployment Success
      run: |
        echo "Preview deployment successful!"
        echo "Preview URL: ${{ steps.vercel-preview.outputs.preview-url }}"

  # ===============================================
  # JOB 4: SKIP PREVIEW NOTIFICATION (develop only)
  # ===============================================
  skip-preview:
    name: Skip Preview Notification
    runs-on: ubuntu-latest
    needs: [quality, check-commits]
    if: github.ref == 'refs/heads/develop' && needs.check-commits.outputs.should-deploy == 'false'
    
    steps:
    - name: Log skip reason
      run: |
        echo "Skipping preview deployment"
        echo "Reason: No commits found with required prefixes"
        echo "Required prefixes: feat, fix, perf, revert"
        echo "Current commits: ${{ needs.check-commits.outputs.commit-details }}"
        
    - name: Create Skip Comment
      uses: actions/github-script@v6
      with:
        script: |
          const sha = context.sha.substring(0, 7);
          console.log(`
          **Preview Deployment Skipped**
          
          **Commit**: \`${sha}\`
          **Branch**: \`develop\`
          **Reason**: No deployment-worthy commits found
          
          ### Required Commit Prefixes
          Preview deployments are only triggered by commits with these prefixes:
          - \`feat:\` - New features
          - \`fix:\` - Bug fixes  
          - \`perf:\` - Performance improvements
          - \`revert:\` - Reverts
          
          ### Current Commits
          ${{ needs.check-commits.outputs.commit-details }}
          
          *To trigger a preview deployment, ensure at least one commit uses the required prefixes.*
          `);

  # ===============================================
  # JOB 5: DEPLOY PRODUCTION (main after merge)
  # ===============================================
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      id: vercel-production
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: Production Deployment Notification
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Production Deployment - ${new Date().toISOString().split('T')[0]}`,
            body: `## Production Deployment Successful
            
            - **Live URL**: ${{ steps.vercel-production.outputs.preview-url }}
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Deployed**: ${new Date().toISOString()}
            
            ### Verification Checklist
            - [ ] Homepage loads correctly
            - [ ] Navigation works
            - [ ] Contact form functional
            - [ ] Mobile responsive
            `,
            labels: ['deployment', 'production']
          });

  # ===============================================
  # JOB 6: PR PREVIEW COMMENT
  # ===============================================
  pr-preview-comment:
    name: PR Preview Comment
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR with Preview
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.issue.number;
          const commitSha = context.payload.pull_request.head.sha;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Pull Request Preview
            
            **Branch**: \`${context.payload.pull_request.head.ref}\`
            **Commit**: \`${commitSha.substring(0, 7)}\`
            
            ### Preview URLs
            **Develop Preview**: https://portfolio-git-develop-sikati-samuels-projects.vercel.app
            
            > **Note**: Preview deployments are only triggered by commits with prefixes: \`feat\`, \`fix\`, \`perf\`, \`revert\`
            
            ### Review Checklist
            - [ ] Code reviewed and approved
            - [ ] Tests pass
            - [ ] Preview deployed successfully (if eligible commits)
            - [ ] No breaking changes
            - [ ] Ready for production
            
            *This preview will be automatically deployed to production when merged to main.*
            `
          });